stop("Invalid method. Please choose 'standard', 'minmax', 'robust', 'maxabs', or 'unitlength'.")
}
}
return(scaled_data)
}
# Load the dataset
data <- read.table("DatasetNA.txt", header = TRUE)
# Scale all variables starting with "Var" using different scaling methods
scaled_data_standard <- scale_variable(data, names(data)[grep("^Var", names(data))], method = "standard")
print("Standard Scaled Data:")
print(scaled_data_standard)
scaled_data_minmax <- scale_variable(data, names(data)[grep("^Var", names(data))], method = "minmax")
print("Min-Max Scaled Data:")
print(scaled_data_minmax)
scaled_data_robust <- scale_variable(data, names(data)[grep("^Var", names(data))], method = "robust")
print("Robust Scaled Data:")
print(scaled_data_robust)
scaled_data_maxabs <- scale_variable(data, names(data)[grep("^Var", names(data))], method = "maxabs")
print("Max-Abs Scaled Data:")
print(scaled_data_maxabs)
scaled_data_unitlength <- scale_variable(data, names(data)[grep("^Var", names(data))], method = "unitlength")
print("Unit Length Scaled Data:")
print(scaled_data_unitlength)
# Define a scaling function
scale_variable <- function(data, var_names, method = "standard") {
# Copy the original data frame to avoid modifying the original
scaled_data <- data
# Check if var_names is a character vector, if not convert it to one
if (!is.character(var_names)) {
var_names <- as.character(var_names)
}
# Scale each variable based on the specified method
for (var in var_names) {
if (method == "standard") {
# Compute mean and standard deviation, excluding NA values
mean_val <- mean(data[[var]], na.rm = TRUE)
sd_val <- sd(data[[var]], na.rm = TRUE)
# Scale the variable
scaled_data[[var]] <- (data[[var]] - mean_val) / sd_val
} else if (method == "minmax") {
# Compute min and max values, excluding NA values
min_val <- min(data[[var]], na.rm = TRUE)
max_val <- max(data[[var]], na.rm = TRUE)
# Scale the variable
scaled_data[[var]] <- (data[[var]] - min_val) / (max_val - min_val)
} else if (method == "robust") {
# Compute median and IQR values, excluding NA values
median_val <- median(data[[var]], na.rm = TRUE)
iqr_val <- IQR(data[[var]], na.rm = TRUE)
# Scale the variable
scaled_data[[var]] <- (data[[var]] - median_val) / iqr_val
} else if (method == "maxabs") {
# Compute max absolute value, excluding NA values
max_abs_val <- max(abs(data[[var]]), na.rm = TRUE)
# Scale the variable
scaled_data[[var]] <- data[[var]] / max_abs_val
} else if (method == "unitlength") {
# Compute the length (norm) of the variable, excluding NA values
length_val <- sqrt(sum(data[[var]]^2, na.rm = TRUE))
# Scale the variable
scaled_data[[var]] <- data[[var]] / length_val
} else {
stop("Invalid method. Please choose 'standard', 'minmax', 'robust', 'maxabs', or 'unitlength'.")
}
}
return(scaled_data)
}
# Load the dataset
data <- read.table("DatasetNA.txt", header = TRUE)
# Scale all variables starting with "Var" using different scaling methods
scaled_data_standard <- scale_variable(data, names(data)[grep("^Var", names(data))], method = "standard")
print("Standard Scaled Data:")
print(scaled_data_standard)
scaled_data_minmax <- scale_variable(data, names(data)[grep("^Var", names(data))], method = "minmax")
print("Min-Max Scaled Data:")
print(scaled_data_minmax)
scaled_data_robust <- scale_variable(data, names(data)[grep("^Var", names(data))], method = "robust")
print("Robust Scaled Data:")
print(scaled_data_robust)
scaled_data_maxabs <- scale_variable(data, names(data)[grep("^Var", names(data))], method = "maxabs")
print("Max-Abs Scaled Data:")
print(scaled_data_maxabs)
scaled_data_unitlength <- scale_variable(data, names(data)[grep("^Var", names(data))], method = "unitlength")
print("Unit Length Scaled Data:")
print(scaled_data_unitlength)
data <- read.table("DatasetNA.txt", header = TRUE, dec=",")
calculate_q1_a<- function(dataset, col_name){
data <- na.omit(dataset)
data[[col_name]] <- as.numeric(data[[col_name]])
n <- nrow(data)
min <- data[[col_name]][1]
max <- data[[col_name]][1]
sum <- 0
for (i in 1:n) {
if (!is.na(data[[col_name]][i])) {
sum <- sum + data[[col_name]][i]
if (data[[col_name]][i] < min) {
min <- data[[col_name]][i]
}
if (data[[col_name]][i] > max) {
max <- data[[col_name]][i]
}
}
}
range <- max - min
mean <- sum / n
sorted_data <- sort(data[[col_name]], na.last = NA)
middle <- floor(n/2)
if (n%%2 == 0) {
median <- (sorted_data[middle] + sorted_data[middle+1])/2
} else {
median <- sorted_data[middle+1]
}
sum_of_sequares <- 0
for (i in 1:n) {
if (!is.na(data[[col_name]][i])) {
sum_of_sequares <- sum_of_sequares + (data[[col_name]][i] - mean)^2
}
}
variance <- sum_of_sequares / (n - 1)
standard_deviation <- sqrt(variance)
cat("--------", col_name, "--------\n")
cat("Number of observations:", n, "\n")
cat("Minimum:", min, "\n")
cat("Maximum:", max, "\n")
cat("Range:", range, "\n")
cat("Sum:", sum, "\n")
cat("Mean:", mean, "\n")
cat("Median:", median, "\n")
cat("Sum of squares:", sum_of_sequares, "\n")
cat("Variance:", variance, "\n")
cat("Standard deviation:", standard_deviation, "\n")
}
calculate_q1_a(data,"Var1")
calculate_q1_a(data,"Var2")
calculate_q1_a(data,"Var3")
calculate_q1_a(data,"Var4")
calculate_q1_a(data,"Var5")
calculate_q1_a(data,"Var6")
calculate_q1_a(data,"Var7")
calculate_q1_a(data,"Var8")
data <- read.table("DatasetNA.txt", header = TRUE)
cross_products <- function(x, y) {
if (length(x) != length(y)) {
stop("Length of vectors x and y must be equal.")
}
n <- length(x)
cross_prod <- sum(x * y)
return(cross_prod)
}
# Function to calculate covariance
covariance <- function(x, y) {
if (length(x) != length(y)) {
stop("Length of vectors x and y must be equal.")
}
n <- length(x)
mean_x <- mean(x, na.rm = TRUE)
mean_y <- mean(y, na.rm = TRUE)
covar <- sum((x - mean_x) * (y - mean_y), na.rm = TRUE) / (n - 1)
return(covar)
}
# Function to calculate correlations
correlation <- function(x, y) {
if (length(x) != length(y)) {
stop("Length of vectors x and y must be equal.")
}
covar_xy <- covariance(x, y)
sd_x <- sd(x, na.rm = TRUE)
sd_y <- sd(y, na.rm = TRUE)
corr <- covar_xy / (sd_x * sd_y)
return(corr)
}
continuous_vars <- data[, c("Var1", "Var2", "Var3", "Var4", "Var5", "Var6", "Var7", "Var8")]
# cross-products
cross_product_matrix <- matrix(0, ncol = ncol(continuous_vars), nrow = ncol(continuous_vars))
for (i in 1:(ncol(continuous_vars) - 1)) {
for (j in (i + 1):ncol(continuous_vars)) {
cross_product_matrix[i, j] <- cross_products(continuous_vars[, i], continuous_vars[, j])
cross_product_matrix[j, i] <- cross_product_matrix[i, j]
}
}
# covariance matrix
covariance_matrix <- cov(continuous_vars, use = "pairwise.complete.obs")
# correlation matrix
correlation_matrix <- cor(continuous_vars, use = "pairwise.complete.obs")
# Results
print("Cross-products:")
print(cross_product_matrix)
print("Covariance Matrix:")
print(covariance_matrix)
print("Correlation Matrix:")
print(correlation_matrix)
data <- read.table("DatasetNA.txt", header = TRUE)
# Fill missing values
for (i in 4:11) {
data[[i]][is.na(data[[i]])] <- mean(data[[i]], na.rm = TRUE)
}
# Calculate statistics by Group factor
statistics_group <- lapply(colnames(data)[4:11], function(x) {
aggregate(data[[x]], by = list(Group = data$Group), FUN = function(y) {
c(
"Variable" = x,
"Number of observations" = sum(!is.na(y)),
"Minimum" = min(y),
"Maximum" = max(y),
"Range" = max(y) - min(y),
"Sum" = sum(y),
"Mean" = mean(y),
"Median" = median(y),
"Sum of squares" = sum(y^2),
"Variance" = var(y),
"Standard deviation" = sd(y)
)
})
})
# Calculate statistics by Gender factor
statistics_gender <- lapply(colnames(data)[4:11], function(x) {
aggregate(data[[x]], by = list(Gender = data$Gender), FUN = function(y) {
c(
"Variable" = x,
"Number of observations" = sum(!is.na(y)),
"Minimum" = min(y),
"Maximum" = max(y),
"Range" = max(y) - min(y),
"Sum" = sum(y),
"Mean" = mean(y),
"Median" = median(y),
"Sum of squares" = sum(y^2),
"Variance" = var(y),
"Standard deviation" = sd(y)
)
})
})
# Calculate statistics by Group and Gender factors
statistics_group_gender <- lapply(colnames(data)[4:11], function(x) {
aggregate(data[[x]], by = list(Group = data$Group, Gender = data$Gender), FUN = function(y) {
c(
"Variable" = x,
"Number of observations" = sum(!is.na(y)),
"Minimum" = min(y),
"Maximum" = max(y),
"Range" = max(y) - min(y),
"Sum" = sum(y),
"Mean" = mean(y),
"Median" = median(y),
"Sum of squares" = sum(y^2),
"Variance" = var(y),
"Standard deviation" = sd(y)
)
})
})
# Results
print("Statistics by Group:")
print(statistics_group)
print("Statistics by Gender:")
print(statistics_gender)
print("Statistics by Group and Gender:")
print(statistics_group_gender)
data <- read.table("DatasetNA.txt", header = TRUE)
cross_products <- function(x, y) {
if (length(x) != length(y)) {
stop("Length of vectors x and y must be equal.")
}
n <- length(x)
cross_prod <- sum(x * y)
return(cross_prod)
}
# Function to calculate covariance
covariance <- function(x, y) {
if (length(x) != length(y)) {
stop("Length of vectors x and y must be equal.")
}
n <- length(x)
mean_x <- mean(x, na.rm = TRUE)
mean_y <- mean(y, na.rm = TRUE)
covar <- sum((x - mean_x) * (y - mean_y), na.rm = TRUE) / (n - 1)
return(covar)
}
# Function to calculate correlations
correlation <- function(x, y) {
if (length(x) != length(y)) {
stop("Length of vectors x and y must be equal.")
}
covar_xy <- covariance(x, y)
sd_x <- sd(x, na.rm = TRUE)
sd_y <- sd(y, na.rm = TRUE)
corr <- covar_xy / (sd_x * sd_y)
return(corr)
}
continuous_vars <- data[, c("Var1", "Var2", "Var3", "Var4", "Var5", "Var6", "Var7", "Var8")]
# cross-products
cross_product_matrix <- matrix(0, ncol = ncol(continuous_vars), nrow = ncol(continuous_vars))
for (i in 1:(ncol(continuous_vars) - 1)) {
for (j in (i + 1):ncol(continuous_vars)) {
cross_product_matrix[i, j] <- cross_products(continuous_vars[, i], continuous_vars[, j])
cross_product_matrix[j, i] <- cross_product_matrix[i, j]
}
}
# covariance matrix
covariance_matrix <- cov(continuous_vars, use = "pairwise.complete.obs")
# correlation matrix
correlation_matrix <- cor(continuous_vars, use = "pairwise.complete.obs")
# Results
print("Cross-products:")
print(cross_product_matrix)
print("Covariance Matrix:")
print(covariance_matrix)
print("Correlation Matrix:")
print(correlation_matrix)
data <- read.table("DatasetNA.txt", header = TRUE)
# Fill missing values
for (i in 4:11) {
data[[i]][is.na(data[[i]])] <- mean(data[[i]], na.rm = TRUE)
}
# Calculate statistics by Group factor
statistics_group <- lapply(colnames(data)[4:11], function(x) {
aggregate(data[[x]], by = list(Group = data$Group), FUN = function(y) {
c(
"Variable" = x,
"Number of observations" = sum(!is.na(y)),
"Minimum" = min(y),
"Maximum" = max(y),
"Range" = max(y) - min(y),
"Sum" = sum(y),
"Mean" = mean(y),
"Median" = median(y),
"Sum of squares" = sum(y^2),
"Variance" = var(y),
"Standard deviation" = sd(y)
)
})
})
# Calculate statistics by Gender factor
statistics_gender <- lapply(colnames(data)[4:11], function(x) {
aggregate(data[[x]], by = list(Gender = data$Gender), FUN = function(y) {
c(
"Variable" = x,
"Number of observations" = sum(!is.na(y)),
"Minimum" = min(y),
"Maximum" = max(y),
"Range" = max(y) - min(y),
"Sum" = sum(y),
"Mean" = mean(y),
"Median" = median(y),
"Sum of squares" = sum(y^2),
"Variance" = var(y),
"Standard deviation" = sd(y)
)
})
})
# Calculate statistics by Group and Gender factors
statistics_group_gender <- lapply(colnames(data)[4:11], function(x) {
aggregate(data[[x]], by = list(Group = data$Group, Gender = data$Gender), FUN = function(y) {
c(
"Variable" = x,
"Number of observations" = sum(!is.na(y)),
"Minimum" = min(y),
"Maximum" = max(y),
"Range" = max(y) - min(y),
"Sum" = sum(y),
"Mean" = mean(y),
"Median" = median(y),
"Sum of squares" = sum(y^2),
"Variance" = var(y),
"Standard deviation" = sd(y)
)
})
})
# Results
print("Statistics by Group:")
print(statistics_group)
print("Statistics by Gender:")
print(statistics_gender)
print("Statistics by Group and Gender:")
print(statistics_group_gender)
data <- read.table("DatasetNA.txt", header = TRUE)
# Define a function to compute cross-products, covariance, and correlations
compute_stats <- function(data, factor1, factor2 = NULL) {
# Filter out NA values
data <- na.omit(data)
if (is.null(factor2)) {
# If only one factor is provided
result <- by(data, data[[factor1]], function(subdata) {
# Convert all columns to numeric
subdata <- apply(subdata, 2, as.numeric)
# Calculate cross-products
cross_products <- crossprod(subdata[, -c(1, which(names(subdata) == factor1))])
# Calculate covariance
covariance <- cov(subdata[, -c(1, which(names(subdata) == factor1))])
# Calculate correlations
correlations <- cor(subdata[, -c(1, which(names(subdata) == factor1))])
return(list(cross_products = cross_products, covariance = covariance, correlations = correlations))
})
} else {
# If both factors are provided
result <- by(data, list(data[[factor1]], data[[factor2]]), function(subdata) {
# Convert all columns to numeric
subdata <- apply(subdata, 2, as.numeric)
# Calculate cross-products
cross_products <- crossprod(subdata[, -c(1, which(names(subdata) %in% c(factor1, factor2)))])
# Calculate covariance
covariance <- cov(subdata[, -c(1, which(names(subdata) %in% c(factor1, factor2)))])
# Calculate correlations
correlations <- cor(subdata[, -c(1, which(names(subdata) %in% c(factor1, factor2)))])
return(list(cross_products = cross_products, covariance = covariance, correlations = correlations))
})
}
return(result)
}
# Compute statistics for different combinations of factors
stats_group <- compute_stats(data, "Group")
stats_gender <- compute_stats(data, "Gender")
stats_group_gender <- compute_stats(data, "Group", "Gender")
# Output the results
print("Statistics by Group:")
print(stats_group)
print("Statistics by Gender:")
print(stats_gender)
print("Statistics by Group and Gender:")
print(stats_group_gender)
# Define a function to draw a scatterplot between two variables
draw_scatterplot <- function(data, x_var, y_var) {
plot(data[[x_var]], data[[y_var]],
xlab = x_var, ylab = y_var,
main = paste("Scatterplot of", x_var, "vs", y_var))
}
# Define a function to draw a scatterplot matrix between variables in a dataframe
draw_scatterplot_matrix <- function(data) {
# Select numeric variables
numeric_vars <- sapply(data, is.numeric)
numeric_data <- data[, numeric_vars]
# Draw a scatterplot matrix between all numeric variables
pairs(numeric_data, main = "Scatterplot Matrix")
# Print the names of variables in the scatterplot matrix
cat("\nVariables in the Scatterplot Matrix:\n")
print(colnames(numeric_data))
}
# Define a function to remove missing values from a dataframe
clean_data <- function(data) {
clean_data <- na.omit(data)
return(clean_data)
}
# Load the dataframe (adapt this step to your own dataframe)
data <- read.table("DatasetNA.txt", header = TRUE)
# Remove missing values
cleaned_data <- clean_data(data)
# Draw a scatterplot between two variables
draw_scatterplot(cleaned_data, "Var1", "Var4")
# Draw a scatterplot matrix between all variables
draw_scatterplot_matrix(cleaned_data)
# Define a scaling function
scale_variable <- function(data, var_names, method = "standard") {
# Copy the original data frame to avoid modifying the original
scaled_data <- data
# Check if var_names is a character vector, if not convert it to one
if (!is.character(var_names)) {
var_names <- as.character(var_names)
}
# Scale each variable based on the specified method
for (var in var_names) {
if (method == "standard") {
# Compute mean and standard deviation, excluding NA values
mean_val <- mean(data[[var]], na.rm = TRUE)
sd_val <- sd(data[[var]], na.rm = TRUE)
# Scale the variable
scaled_data[[var]] <- (data[[var]] - mean_val) / sd_val
} else if (method == "minmax") {
# Compute min and max values, excluding NA values
min_val <- min(data[[var]], na.rm = TRUE)
max_val <- max(data[[var]], na.rm = TRUE)
# Scale the variable
scaled_data[[var]] <- (data[[var]] - min_val) / (max_val - min_val)
} else if (method == "robust") {
# Compute median and IQR values, excluding NA values
median_val <- median(data[[var]], na.rm = TRUE)
iqr_val <- IQR(data[[var]], na.rm = TRUE)
# Scale the variable
scaled_data[[var]] <- (data[[var]] - median_val) / iqr_val
} else if (method == "maxabs") {
# Compute max absolute value, excluding NA values
max_abs_val <- max(abs(data[[var]]), na.rm = TRUE)
# Scale the variable
scaled_data[[var]] <- data[[var]] / max_abs_val
} else if (method == "unitlength") {
# Compute the length (norm) of the variable, excluding NA values
length_val <- sqrt(sum(data[[var]]^2, na.rm = TRUE))
# Scale the variable
scaled_data[[var]] <- data[[var]] / length_val
} else {
stop("Invalid method. Please choose 'standard', 'minmax', 'robust', 'maxabs', or 'unitlength'.")
}
}
return(scaled_data)
}
# Load the dataset
data <- read.table("DatasetNA.txt", header = TRUE)
# Scale all variables starting with "Var" using different scaling methods
scaled_data_standard <- scale_variable(data, names(data)[grep("^Var", names(data))], method = "standard")
print("Standard Scaled Data:")
print(scaled_data_standard)
scaled_data_minmax <- scale_variable(data, names(data)[grep("^Var", names(data))], method = "minmax")
print("Min-Max Scaled Data:")
print(scaled_data_minmax)
scaled_data_robust <- scale_variable(data, names(data)[grep("^Var", names(data))], method = "robust")
print("Robust Scaled Data:")
print(scaled_data_robust)
scaled_data_maxabs <- scale_variable(data, names(data)[grep("^Var", names(data))], method = "maxabs")
print("Max-Abs Scaled Data:")
print(scaled_data_maxabs)
scaled_data_unitlength <- scale_variable(data, names(data)[grep("^Var", names(data))], method = "unitlength")
print("Unit Length Scaled Data:")
print(scaled_data_unitlength)
