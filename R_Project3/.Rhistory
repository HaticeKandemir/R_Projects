models_df$R_squared <- as.numeric(models_df$R_squared)
models_df <- models_df[order(models_df$Number_of_Variables, -models_df$R_squared),]
return(models_df)
}
# Example usage
data <- read.table("MultRegData.txt", header = TRUE)
Y <- data$Y
X <- as.matrix(data[, c("X1", "X2", "X3", "X4", "X5", "X6", "X7")])
model_results <- model_selection(Y, X)
print(model_results)
# Function for simple and multiple linear regression using matrix operations
linear_regression_matrix <- function(Y, X) {
# Ensure Y is a column vector
Y <- matrix(Y, ncol = 1)
# Add a column of ones to X for the intercept
X <- cbind(1, X)
# Calculate the coefficients (beta_hat)
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% Y
# Calculate the estimates of Y (Y_hat)
Y_hat <- X %*% beta_hat
# Calculate the residuals (residuals)
residuals <- Y - Y_hat
# Calculate TSS (Total Sum of Squares)
TSS <- sum((Y - mean(Y))^2)
# Calculate RSS (Residual Sum of Squares)
RSS <- sum(residuals^2)
# Calculate RMSS (Regression Model Sum of Squares)
RMSS <- TSS - RSS
# Calculate R-squared (Coefficient of Determination)
R_squared <- RMSS / TSS
# Return a list of results
return(list(
coefficients = beta_hat,
Y_hat = Y_hat,
residuals = residuals,
TSS = TSS,
RMSS = RMSS,
RSS = RSS,
R_squared = R_squared
))
}
# Example usage
data <- read.table("MultRegData.txt", header = TRUE)
Y <- data$Y
X <- as.matrix(data[, c("X1", "X2", "X3", "X4", "X5", "X6", "X7")])
result <- linear_regression_matrix(Y, X)
# Display the results
print(result$coefficients) # Regression coefficients including the intercept
print(result$Y_hat)        # Estimated values of Y
print(result$residuals)    # Residuals
print(result$TSS)          # Total Sum of Squares
print(result$RMSS)         # Regression Model Sum of Squares
print(result$RSS)          # Residual Sum of Squares
print(result$R_squared)    # R-squared
# Function: Linear Regression Analysis
linear_regression <- function(Y, X) {
# Convert Y to a column matrix
Y <- matrix(Y, ncol = 1)
# Add intercept column to X matrix
X <- cbind(1, X)
# Calculate regression coefficients (beta)
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% Y
# Calculate estimated Y values (Y^)
Y_hat <- X %*% beta_hat
# Calculate residuals (e^)
residuals <- Y - Y_hat
# Total sum of squares (TSS)
TSS <- sum((Y - mean(Y))^2)
# Residual sum of squares (RSS)
RSS <- sum(residuals^2)
# Regression model sum of squares (RMSS)
RMSS <- TSS - RSS
# R-squared (R-squared)
R_squared <- RMSS / TSS
return(list(beta_hat = beta_hat,
Y_hat = Y_hat,
residuals = residuals,
TSS = TSS,
RMSS = RMSS,
RSS = RSS,
R_squared = R_squared))
}
# Example Usage
data <- read.table("MultRegData.txt", header = TRUE)
Y <- data$Y
X <- as.matrix(data[, c("X1", "X2", "X3", "X4", "X5", "X6", "X7")])
# Perform the regression analysis
result <- linear_regression(Y, X)
# Print the results
print("Beta Coefficients:")
print(result$beta_hat)
print("Estimated Y (Y^):")
print(result$Y_hat)
print("Residuals (e^):")
print(result$residuals)
print("Total Sum of Squares (TSS):")
print(result$TSS)
print("Regression Model Sum of Squares (RMSS):")
print(result$RMSS)
print("Residual Sum of Squares (RSS):")
print(result$RSS)
print("R-squared:")
print(result$R_squared)
# Function: Linear Regression Analysis
linear_regression <- function(Y, X) {
# Convert Y to a column matrix
Y <- matrix(Y, ncol = 1)
# Add intercept column to X matrix
X <- cbind(1, X)
# Calculate regression coefficients (beta)
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% Y
# Calculate estimated Y values (Y^)
Y_hat <- X %*% beta_hat
# Calculate residuals (e^)
residuals <- Y - Y_hat
# Total sum of squares (TSS)
TSS <- sum((Y - mean(Y))^2)
# Residual sum of squares (RSS)
RSS <- sum(residuals^2)
# Regression model sum of squares (RMSS)
RMSS <- TSS - RSS
# R-squared (R_squared)
R_squared <- RMSS / TSS
return(list(beta_hat = beta_hat,
Y_hat = Y_hat,
residuals = residuals,
TSS = TSS,
RMSS = RMSS,
RSS = RSS,
R_squared = R_squared))
}
# Example Usage
data <- read.table("MultRegData.txt", header = TRUE)
Y <- data$Y
X <- as.matrix(data[, c("X1", "X2", "X3", "X4", "X5", "X6", "X7")])
# Perform the regression analysis
result <- linear_regression(Y, X)
# Print the results in a readable format
cat("Linear Regression Results:\n")
cat("-------------------------\n")
cat("Beta Coefficients:\n")
for (i in 1:length(result$beta_hat)) {
cat(sprintf("Beta %d: %f\n", i - 1, result$beta_hat[i]))
}
cat("\n")
cat("Estimated Y (Y^):\n")
print(head(result$Y_hat, 10)) # Print first 10 for brevity
cat("\n")
cat("Residuals (e^):\n")
print(head(result$residuals, 10)) # Print first 10 for brevity
cat("\n")
cat(sprintf("Total Sum of Squares (TSS): %f\n", result$TSS))
cat(sprintf("Regression Model Sum of Squares (RMSS): %f\n", result$RMSS))
cat(sprintf("Residual Sum of Squares (RSS): %f\n", result$RSS))
cat(sprintf("R-squared: %f\n", result$R_squared))
# Function: Linear Regression Analysis
linear_regression <- function(Y, X) {
# Convert Y to a column matrix
Y <- matrix(Y, ncol = 1)
# Add intercept column to X matrix
X <- cbind(1, X)
# Calculate regression coefficients (beta)
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% Y
# Calculate estimated Y values (Y^)
Y_hat <- X %*% beta_hat
# Calculate residuals (e^)
residuals <- Y - Y_hat
# Total sum of squares (TSS)
TSS <- sum((Y - mean(Y))^2)
# Residual sum of squares (RSS)
RSS <- sum(residuals^2)
# Regression model sum of squares (RMSS)
RMSS <- TSS - RSS
# R-squared (R_squared)
R_squared <- RMSS / TSS
return(list(beta_hat = beta_hat,
Y_hat = Y_hat,
residuals = residuals,
TSS = TSS,
RMSS = RMSS,
RSS = RSS,
R_squared = R_squared))
}
# Example Usage
data <- read.table("MultRegData.txt", header = TRUE)
Y <- data$Y
X <- as.matrix(data[, c("X1", "X2", "X3", "X4", "X5", "X6", "X7")])
# Perform the regression analysis
result <- linear_regression(Y, X)
# Print the results in a readable format
cat("Linear Regression Results:\n")
cat("-------------------------\n")
cat("Beta Coefficients:\n")
for (i in 1:length(result$beta_hat)) {
cat(sprintf("Beta %d: %f\n", i - 1, result$beta_hat[i]))
}
cat("Estimated Y (Y^):\n")
print(head(result$Y_hat, 10)) # Print first 10 for brevity
cat("Residuals (e^):\n")
print(head(result$residuals, 10)) # Print first 10 for brevity
cat(sprintf("Total Sum of Squares (TSS): %f\n", result$TSS))
cat(sprintf("Regression Model Sum of Squares (RMSS): %f\n", result$RMSS))
cat(sprintf("Residual Sum of Squares (RSS): %f\n", result$RSS))
cat(sprintf("R-squared: %f\n", result$R_squared))
# Function: Linear Regression Analysis
linear_regression <- function(Y, X) {
# Convert Y to a column matrix
Y <- matrix(Y, ncol = 1)
# Add intercept column to X matrix
X <- cbind(1, X)
# Calculate regression coefficients (beta)
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% Y
# Calculate estimated Y values (Y^)
Y_hat <- X %*% beta_hat
# Calculate residuals (e^)
residuals <- Y - Y_hat
# Total sum of squares (TSS)
TSS <- sum((Y - mean(Y))^2)
# Residual sum of squares (RSS)
RSS <- sum(residuals^2)
# Regression model sum of squares (RMSS)
RMSS <- TSS - RSS
# R-squared (R_squared)
R_squared <- RMSS / TSS
return(list(beta_hat = beta_hat,
Y_hat = Y_hat,
residuals = residuals,
TSS = TSS,
RMSS = RMSS,
RSS = RSS,
R_squared = R_squared))
}
# Example Usage
data <- read.table("MultRegData.txt", header = TRUE)
Y <- data$Y
X <- as.matrix(data[, c("X1", "X2", "X3", "X4", "X5", "X6", "X7")])
# Perform the regression analysis
result <- linear_regression(Y, X)
# Print the results in a readable format
cat("Linear Regression Results:\n")
cat("-------------------------\n")
cat("Beta Coefficients:\n")
for (i in 1:length(result$beta_hat)) {
cat(sprintf("Beta %d: %f\n", i - 1, result$beta_hat[i]))
}
cat("Estimated Y (Y^):\n")
print(head(result$Y_hat, 10)) # Print first 10 for brevity
cat("Residuals (e^):\n")
print(head(result$residuals, 10)) # Print first 10 for brevity
cat(sprintf("Total Sum of Squares (TSS): %f\n", result$TSS))
cat(sprintf("Regression Model Sum of Squares (RMSS): %f\n", result$RMSS))
cat(sprintf("Residual Sum of Squares (RSS): %f\n", result$RSS))
cat(sprintf("R-squared: %f\n", result$R_squared))
setwd("~/Desktop/project-3/questions")
#Function Definition
linear_regression <- function(Y, X) {
results <- list()
#Add a column of ones to X for the intercept
X <- cbind(1, X)
#Calculate total sum of squares (TSS)
TSS <- sum((Y - mean(Y))^2)
#Loop over each variable and fit a model with that variable added
for (i in 1:ncol(X)) {
#Fit model with i-th variable
B <- solve(t(X[, 1:i]) %*% X[, 1:i]) %*% t(X[, 1:i]) %*% Y
#Calculate estimated Y (Y_hat) for model with i-th variable
Y_hat <- X[, 1:i] %*% B
#Calculate residuals (residuals) for model with i-th variable
residuals <- Y - Y_hat
#Calculate residual sum of squares (RSS) for model with i-th variable
RSS <- sum(residuals^2)
#Calculate model sum of squares (MS) for model with i-th variable
MS <- sum((Y_hat - mean(Y))^2)
#Calculate RMSS (regression model sum of squares) for model with i-th variable
RMSS <- MS / (nrow(X) - (i+1))  # Eksik bir ????karma i??lemi oldu??unu d??????nd??????m i??in i+1 olarak de??i??tirdim.
#Calculate R-square (coefficient of determination) for model with i-th variable
R_square <- 1 - (RSS / TSS)
#Create results for model with i-th variable
results_model <- data.frame(
Model = paste("Model", i),  # Model say??s??n?? ekledim
Number_of_Variables = i,
Variable_Name = paste("X", seq_len(i), sep = ""),  # De??i??ken ismini d??zenledim
TSS = TSS,
RMSS = RMSS,
RSS = RSS,
R_Square = R_square
)
#Add results for model with i-th variable to the list of results
results <- c(results, list(results_model))
}
#Combine all results into a single data frame
results <- do.call(rbind, results)
return(results)
}
#Read the data
data <- read.table("MultRegData.txt", header = TRUE)
#Define dependent and independent variables
Y <- data$Y  #Dependent variable Y
X <- as.matrix(data[, -1])  #Independent variables X (excluding the first column)
#Perform regression analysis
result <- linear_regression(Y, X)
#Print the results
print(result)
#Function to perform model selection based on different combinations of independent variables
model_selection <- function(Y, X) {
#Initialize an empty data frame to store the results
results <- data.frame(Model = character(), Number_of_Variables = numeric(),
Variable_Names = character(), TSS = numeric(),
RMSS = numeric(), RSS = numeric(), R_Square = numeric(),
Coefficients = character(), stringsAsFactors = FALSE)
#Add a column of ones to X for the intercept
X <- cbind(1, X)
#Calculate total sum of squares (TSS)
TSS <- sum((Y - mean(Y))^2)
#Loop over each combination of variables and fit a model
for (i in 1:ncol(X)) {
#Generate all possible combinations of variables
combinations <- combn(ncol(X), i)
#Loop over each combination of variables
for (j in 1:ncol(combinations)) {
#Subset X matrix based on the current combination of variables
X_subset <- X[, combinations[, j]]
#Fit model using lm function
model <- lm(Y ~ X_subset)
#Calculate RSS
RSS <- sum(model$residuals^2)
#Calculate R-square
R_square <- summary(model)$r.squared
#Calculate RMSS
RMSS <- TSS * (1 - R_square)
#Create results for the current model
results_model <- data.frame(
Model = paste("Model", paste(i, j, sep = "_")),
Number_of_Variables = i,
Variable_Names = paste(colnames(X_subset), collapse = ", "),
TSS = TSS,
RMSS = RMSS,
RSS = RSS,
R_Square = R_square,
Coefficients = paste(coef(model), collapse = ", ")
)
#Add results for the current model to the results data frame
results <- rbind(results, results_model)
}
}
return(results)
}
#Read the data
data <- read.table("MultRegData.txt", header = TRUE)
#Define dependent and independent variables
Y <- data$Y
X <- as.matrix(data[, -1])
result <- model_selection(Y, X)
#Print the results
print(result)
setwd("~/Desktop/R_Project3")
# Function for calculating regression statistics
calculate_stats <- function(Y, X) {
Y <- matrix(Y, ncol = 1)
X <- cbind(1, X)
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% Y
Y_hat <- X %*% beta_hat
residuals <- Y - Y_hat
TSS <- sum((Y - mean(Y))^2)
RSS <- sum(residuals^2)
RMSS <- TSS - RSS
R_squared <- RMSS / TSS
return(list(TSS = TSS, RMSS = RMSS, RSS = RSS, R_squared = R_squared))
}
# Function for generating combinations of variables
generate_combinations <- function(vars) {
n <- length(vars)
combos <- list()
for (i in 1:n) {
combos <- c(combos, combn(vars, i, simplify = FALSE))
}
return(combos)
}
# Function for model selection based on R-squared
model_selection <- function(Y, X) {
var_names <- colnames(X)
all_models <- list()
combinations <- generate_combinations(var_names)
for (combo in combinations) {
X_subset <- as.matrix(X[, combo])
stats <- calculate_stats(Y, X_subset)
all_models[[length(all_models) + 1]] <- c(length(combo), paste(combo, collapse = " "), stats)
}
models_df <- do.call(rbind, lapply(all_models, function(model) {
c(Model = as.character(model[2]),
Number_of_Variables = model[1],
TSS = model$TSS,
RMSS = model$RMSS,
RSS = model$RSS,
R_squared = model$R_squared)
}))
models_df <- as.data.frame(models_df, stringsAsFactors = FALSE)
models_df$Number_of_Variables <- as.numeric(models_df$Number_of_Variables)
models_df$TSS <- as.numeric(models_df$TSS)
models_df$RMSS <- as.numeric(models_df$RMSS)
models_df$RSS <- as.numeric(models_df$RSS)
models_df$R_squared <- as.numeric(models_df$R_squared)
models_df <- models_df[order(models_df$Number_of_Variables, -models_df$R_squared),]
return(models_df)
}
# Example usage
data <- read.table("MultRegData.txt", header = TRUE)
Y <- data$Y
X <- as.matrix(data[, c("X1", "X2", "X3", "X4", "X5", "X6", "X7")])
model_results <- model_selection(Y, X)
print(model_results)
setwd("~/Desktop/project-3")
#Function to perform model selection based on different combinations of independent variables
model_selection <- function(Y, X) {
#Initialize an empty data frame to store the results
results <- data.frame(Model = character(), Number_of_Variables = numeric(),
Variable_Names = character(), TSS = numeric(),
RMSS = numeric(), RSS = numeric(), R_Square = numeric(),
Coefficients = character(), stringsAsFactors = FALSE)
#Add a column of ones to X for the intercept
X <- cbind(1, X)
#Calculate total sum of squares (TSS)
TSS <- sum((Y - mean(Y))^2)
#Loop over each combination of variables and fit a model
for (i in 1:ncol(X)) {
#Generate all possible combinations of variables
combinations <- combn(ncol(X), i)
#Loop over each combination of variables
for (j in 1:ncol(combinations)) {
#Subset X matrix based on the current combination of variables
X_subset <- X[, combinations[, j]]
#Fit model using lm function
model <- lm(Y ~ X_subset)
#Calculate RSS
RSS <- sum(model$residuals^2)
#Calculate R-square
R_square <- summary(model)$r.squared
#Calculate RMSS
RMSS <- TSS * (1 - R_square)
#Create results for the current model
results_model <- data.frame(
Model = paste("Model", paste(i, j, sep = "_")),
Number_of_Variables = i,
Variable_Names = paste(colnames(X_subset), collapse = ", "),
TSS = TSS,
RMSS = RMSS,
RSS = RSS,
R_Square = R_square,
Coefficients = paste(coef(model), collapse = ", ")
)
#Add results for the current model to the results data frame
results <- rbind(results, results_model)
}
}
return(results)
}
#Read the data
data <- read.table("MultRegData.txt", header = TRUE)
setwd("~/Desktop/project-3/questions")
#Function to perform model selection based on different combinations of independent variables
model_selection <- function(Y, X) {
#Initialize an empty data frame to store the results
results <- data.frame(Model = character(), Number_of_Variables = numeric(),
Variable_Names = character(), TSS = numeric(),
RMSS = numeric(), RSS = numeric(), R_Square = numeric(),
Coefficients = character(), stringsAsFactors = FALSE)
#Add a column of ones to X for the intercept
X <- cbind(1, X)
#Calculate total sum of squares (TSS)
TSS <- sum((Y - mean(Y))^2)
#Loop over each combination of variables and fit a model
for (i in 1:ncol(X)) {
#Generate all possible combinations of variables
combinations <- combn(ncol(X), i)
#Loop over each combination of variables
for (j in 1:ncol(combinations)) {
#Subset X matrix based on the current combination of variables
X_subset <- X[, combinations[, j]]
#Fit model using lm function
model <- lm(Y ~ X_subset)
#Calculate RSS
RSS <- sum(model$residuals^2)
#Calculate R-square
R_square <- summary(model)$r.squared
#Calculate RMSS
RMSS <- TSS * (1 - R_square)
#Create results for the current model
results_model <- data.frame(
Model = paste("Model", paste(i, j, sep = "_")),
Number_of_Variables = i,
Variable_Names = paste(colnames(X_subset), collapse = ", "),
TSS = TSS,
RMSS = RMSS,
RSS = RSS,
R_Square = R_square,
Coefficients = paste(coef(model), collapse = ", ")
)
#Add results for the current model to the results data frame
results <- rbind(results, results_model)
}
}
return(results)
}
#Read the data
data <- read.table("MultRegData.txt", header = TRUE)
#Define dependent and independent variables
Y <- data$Y
X <- as.matrix(data[, -1])
result <- model_selection(Y, X)
#Print the results
print(result)
setwd("~/Desktop/R_Project3")
